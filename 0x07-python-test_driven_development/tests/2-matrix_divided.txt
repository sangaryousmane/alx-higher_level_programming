Test case for the matrix_divided function
=========================================

divides all elements of a matrix.

USAGE
=========

Import module
>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

 Handle the case of a string(non int or float)
>>> matrix_divided([[1, 2], [3, 4]], 'a')
Traceback (most recent call last):
 ...
TypeError: div must be a number

Handle a case of a empty matrix
>>> matrix_divided([], 2)
Traceback (most recent call last):
 ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

A case of a matrix divided by a float
>>> matrix_divided([[1, 2], [3, 4]], 2.5)
[[0.4, 0.8], [1.2, 1.6]]

A case of a matrix divided by an integer
>>> matrix_divided([[1, 2], [3, 4]], 2)
[[0.5, 1.0], [1.5, 2.0]]

When the denominator is zero
>>> matrix_divided([[1, 2], [3, 4]], 0)
Traceback (most recent call last):
 ...
ZeroDivisionError: division by zero

If the matrix is not a list of int or float
>>> matrix_divided([[1, 2], [3, 'a']], 2)
Traceback (most recent call last):
  ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

Matrix of unequal size
>>> matrix_divided([[1, 2], [3, 4, 5]], 2)
Traceback (most recent call last):
  ...
TypeError: Each row of the matrix must have the same size
